package main

// Autogenerated by github.com/wendigo/go-bind-plugin on 2016-11-12 19:45:40.323601152 +0100 CET, do not edit!
// Command: go-bind-plugin -plugin-path ./internal/test_fixtures/generated/plugin_as_interface/plugin.so -plugin-package ./internal/test_fixtures/plugin_as_interface -output-name TestWrapper -output-path ./internal/test_fixtures/generated/plugin_as_interface/plugin.go -output-package main -sha256 -rebuild -interface -hide-vars
//
// Plugin ./internal/test_fixtures/generated/plugin_as_interface/plugin.so info:
// - package: github.com/wendigo/go-bind-plugin/cli/internal/test_fixtures/plugin_as_interface
// - size: 2448616 bytes
// - sha256: 462e6edc4450b6590c4e1184b4b446eed92b6358c772473bd803d1fe59e690fa

import (
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"io"
	"os"
	"plugin"
	"reflect"
	"strings"
)

// TestWrapper wraps symbols (functions and variables) exported by plugin github.com/wendigo/go-bind-plugin/cli/internal/test_fixtures/plugin_as_interface
//
// See docs at https://godoc.org/github.com/wendigo/go-bind-plugin/cli/internal/test_fixtures/plugin_as_interface
type _TestWrapper struct {
	// Exported functions
	_NonReturningFunction func()
	_ReturningInt32       func() int32
	_ReturningIntArray    func() [3]int32
	_ReturningStringSlice func() []string
}

// TestWrapper wraps functions exported by plugin github.com/wendigo/go-bind-plugin/cli/internal/test_fixtures/plugin_as_interface
//
// See docs at https://godoc.org/github.com/wendigo/go-bind-plugin/cli/internal/test_fixtures/plugin_as_interface
type TestWrapper interface {
	// Exported functions
	NonReturningFunction()
	ReturningInt32() int32
	ReturningIntArray() [3]int32
	ReturningStringSlice() []string
}

// NonReturningFunction function was exported from plugin github.com/wendigo/go-bind-plugin/cli/internal/test_fixtures/plugin_as_interface symbol 'NonReturningFunction'
//
// See docs at https://godoc.org/github.com/wendigo/go-bind-plugin/cli/internal/test_fixtures/plugin_as_interface#NonReturningFunction
func (p *_TestWrapper) NonReturningFunction() {
	p._NonReturningFunction()
}

// ReturningInt32 function was exported from plugin github.com/wendigo/go-bind-plugin/cli/internal/test_fixtures/plugin_as_interface symbol 'ReturningInt32'
//
// See docs at https://godoc.org/github.com/wendigo/go-bind-plugin/cli/internal/test_fixtures/plugin_as_interface#ReturningInt32
func (p *_TestWrapper) ReturningInt32() int32 {
	return p._ReturningInt32()
}

// ReturningIntArray function was exported from plugin github.com/wendigo/go-bind-plugin/cli/internal/test_fixtures/plugin_as_interface symbol 'ReturningIntArray'
//
// See docs at https://godoc.org/github.com/wendigo/go-bind-plugin/cli/internal/test_fixtures/plugin_as_interface#ReturningIntArray
func (p *_TestWrapper) ReturningIntArray() [3]int32 {
	return p._ReturningIntArray()
}

// ReturningStringSlice function was exported from plugin github.com/wendigo/go-bind-plugin/cli/internal/test_fixtures/plugin_as_interface symbol 'ReturningStringSlice'
//
// See docs at https://godoc.org/github.com/wendigo/go-bind-plugin/cli/internal/test_fixtures/plugin_as_interface#ReturningStringSlice
func (p *_TestWrapper) ReturningStringSlice() []string {
	return p._ReturningStringSlice()
}

// String returnes textual representation of the wrapper. It provides info on exported symbols and variables.
func (p *_TestWrapper) String() string {
	var lines []string
	lines = append(lines, "Interface TestWrapper:")
	lines = append(lines, "\t- Generated on: 2016-11-12 19:45:40.323601152 +0100 CET")
	lines = append(lines, "\t- Command: go-bind-plugin -plugin-path ./internal/test_fixtures/generated/plugin_as_interface/plugin.so -plugin-package ./internal/test_fixtures/plugin_as_interface -output-name TestWrapper -output-path ./internal/test_fixtures/generated/plugin_as_interface/plugin.go -output-package main -sha256 -rebuild -interface -hide-vars")
	lines = append(lines, "\nPlugin info:")
	lines = append(lines, "\t- package: github.com/wendigo/go-bind-plugin/cli/internal/test_fixtures/plugin_as_interface")
	lines = append(lines, "\t- sha256 sum: 462e6edc4450b6590c4e1184b4b446eed92b6358c772473bd803d1fe59e690fa")
	lines = append(lines, "\t- size: 2448616 bytes")
	lines = append(lines, "\nExported functions (4):")
	lines = append(lines, "\t- NonReturningFunction func()")
	lines = append(lines, "\t- ReturningInt32 func() (int32)")
	lines = append(lines, "\t- ReturningIntArray func() ([3]int32)")
	lines = append(lines, "\t- ReturningStringSlice func() ([]string)")

	return strings.Join(lines, "\n")
}

var (
	_ TestWrapper = (*_TestWrapper)(nil)
)

// BindTestWrapper loads plugin from the given path and binds functions
// to the struct implementing TestWrapper interface.
// When plugin is loaded sha256 checksum is computed and checked against precomputed once. On mismatch error is returned.
func BindTestWrapper(path string) (TestWrapper, error) {
	p, err := plugin.Open(path)

	if err != nil {
		return nil, fmt.Errorf("could not open plugin: %s", err)
	}

	fileChecksum := func(path string) (string, error) {
		hasher := sha256.New()

		file, err := os.Open(path)

		if err != nil {
			return "", err
		}
		defer file.Close()

		if _, err := io.Copy(hasher, file); err != nil {
			return "", err
		}

		return hex.EncodeToString(hasher.Sum(nil)), nil
	}

	checksum, err := fileChecksum(path)
	if err != nil {
		return nil, fmt.Errorf("could not calculate file %s checksum", path)
	}

	if checksum != "462e6edc4450b6590c4e1184b4b446eed92b6358c772473bd803d1fe59e690fa" {
		return nil, fmt.Errorf("SHA256 checksum mismatch (expected: 462e6edc4450b6590c4e1184b4b446eed92b6358c772473bd803d1fe59e690fa, actual: %s)", checksum)
	}

	ret := new(_TestWrapper)

	funcNonReturningFunction, err := p.Lookup("NonReturningFunction")
	if err != nil {
		return nil, fmt.Errorf("could not import function 'NonReturningFunction', symbol not found: %s", err)
	}

	if typed, ok := funcNonReturningFunction.(func()); ok {
		ret._NonReturningFunction = typed
	} else {
		return nil, fmt.Errorf("could not import function 'NonReturningFunction', incompatible types 'func()' and '%s'", reflect.TypeOf(funcNonReturningFunction))
	}

	funcReturningInt32, err := p.Lookup("ReturningInt32")
	if err != nil {
		return nil, fmt.Errorf("could not import function 'ReturningInt32', symbol not found: %s", err)
	}

	if typed, ok := funcReturningInt32.(func() int32); ok {
		ret._ReturningInt32 = typed
	} else {
		return nil, fmt.Errorf("could not import function 'ReturningInt32', incompatible types 'func() (int32)' and '%s'", reflect.TypeOf(funcReturningInt32))
	}

	funcReturningIntArray, err := p.Lookup("ReturningIntArray")
	if err != nil {
		return nil, fmt.Errorf("could not import function 'ReturningIntArray', symbol not found: %s", err)
	}

	if typed, ok := funcReturningIntArray.(func() [3]int32); ok {
		ret._ReturningIntArray = typed
	} else {
		return nil, fmt.Errorf("could not import function 'ReturningIntArray', incompatible types 'func() ([3]int32)' and '%s'", reflect.TypeOf(funcReturningIntArray))
	}

	funcReturningStringSlice, err := p.Lookup("ReturningStringSlice")
	if err != nil {
		return nil, fmt.Errorf("could not import function 'ReturningStringSlice', symbol not found: %s", err)
	}

	if typed, ok := funcReturningStringSlice.(func() []string); ok {
		ret._ReturningStringSlice = typed
	} else {
		return nil, fmt.Errorf("could not import function 'ReturningStringSlice', incompatible types 'func() ([]string)' and '%s'", reflect.TypeOf(funcReturningStringSlice))
	}

	return ret, nil
}


func main() {
  pl, err := BindTestWrapper("./internal/test_fixtures/generated/plugin_as_interface/plugin.so")

  if err != nil {
    fmt.Println(err)
    os.Exit(1)
  }

  fmt.Println(pl.ReturningStringSlice())
}
